name: Django Backend CI Workflow

# Controls when the workflow will run
on:
  # Allows us to call this workflow within another workflow
  workflow_call:
  # Allows us to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Triggered based on the git event type
  push:
    branches: [master]
  pull_request:
    branches: [master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Add in environment variables for the entire "build" job
    env:
      APP_ENV: test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 9876
      POSTGRES_HOST: localhost # default host value for the database
      POSTGRES_DB: bud_local_db
      POSTGRES_PORT: 5432
      DJANGO_SECRET_KEY: _!l0$=nq9(ib-n1dclpoh^y1z*50jxn@_%9%(elwmspw73@qa&
    services:
      postgres_main:
        image: postgres:14.5
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    # If we want to test multiple python version(s)
    strategy:
      matrix:
        python-version: ["3.10"] # ["3.8", "3.9", "3.10"]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      # Install dependencies
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      # Run SonarQube
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      # Run a linter
      - name: Run pylint
        run: |
          # DJANGO_SETTINGS_MODULE=budget_lens_backend.settings pylint --load-plugins pylint_django --django-settings-module=budget_lens_backend.settings **/*.py
      # Run python manage.py test coverage
      - name: Generate Coverage Report
        run: |
          pip install coverage
          coverage erase
          coverage run --branch manage.py test
          coverage report
          coverage html
      - name: Upload Coverage Report artifact
        uses: actions/upload-artifact@v3
        with:
          name: Coverage_Report
          path: htmlcov/
          retention-days: 3
      - name: Run Tests
        # Step specific environment variables
        env:
          DEBUG: ${{ env.DEBUG }}
          DJANGO_SECRET_KEY: ${{ env.DJANGO_SECRET_KEY }}
          DB_USERNAME: ${{ env.POSTGRES_USER }}
          DB_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          DB_HOST: ${{ env.POSTGRES_HOST }}
          DB_DATABASE: ${{ env.POSTGRES_DB }}
          DB_PORT: ${{ env.POSTGRES_PORT }}

        run: |
          python manage.py test
      - name: Run Flake8
        run: flake8 .