name: Django Backend CI/CD Workflow

# Controls when the workflow will run
on:
  # Allows us to call this workflow within another workflow
  workflow_call:
  # Allows us to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Triggered based on the git event type
  push:
    branches: [master]
  pull_request:
    branches: [master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Add in environment variables for the entire "build" job
    env:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 9876
      POSTGRES_HOST: localhost # default host value for the database
      POSTGRES_DB: bud_local_db
      POSTGRES_PORT: 5432
      DJANGO_SECRET_KEY: _!l0$=nq9(ib-n1dclpoh^y1z*50jxn@_%9%(elwmspw73@qa&
    services:
      postgres_main:
        image: postgres:14.5
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    # If we want to test multiple python version(s)
    strategy:
      matrix:
        python-version: ["3.10"] # ["3.8", "3.9", "3.10"]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv wheel
      - id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv install --deploy --dev
      - name: Run test suite
        run: |
          pipenv run test -svvv
          env:
            TEST_DB_HOST: localhost
            TEST_DB_NAME: postgres
            TEST_DB_PASS: postgres
            TEST_DB_PORT: 5432
            TEST_DB_USER: postgres
      - name: Run linter
        run: |
          pipenv run lint
      - name: Run formatting check
        run: |
          pipenv run format --check
      - name: Run Tests
        # Step specific environment variables
        env:
          DEBUG: "0"
          DJANGO_SECRET_KEY: ${{ env.DJANGO_SECRET_KEY }}
          DB_USERNAME: ${{ env.POSTGRES_USER }}
          DB_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          DB_HOST: ${{ env.POSTGRES_HOST }}
          DB_DATABASE: ${{ env.POSTGRES_DB }}
          DB_PORT: ${{ env.POSTGRES_PORT }}
        run: |
          python manage.py test
          python manage.py collectstatic --noinput
